:PROPERTIES:
:ID:       f7d3615d-a80d-4e25-9eb4-d8939a7eb197
:header-args: :tangle yes ~/uni/learn_pytorch_geo/basics.py :session python
:END:
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="imagine.css" />
#+OPTIONS: toc:nil num:nil html-style:nil
#+title: Pytorch GNN basics
* Installation and setup
Assuming you are running in a unix environment with at least python 3.12 installed.
1. Instantiate a virtual environment using ~python3 -m venv pyg~ and then activating it using ~source pyg/bin/activate~
2. Installed pip and then installed pytorch geometric using
#+BEGIN_SRC sh :tangle no
  pip install torch_geometric
  pip install pyg_lib torch_scatter torch_sparse torch_cluster torch_spline_conv -f https://data.pyg.org/whl/torch-2.4.0+cpu.html
#+END_SRC
* Utility
Used to get only the last few lines of the output
#+NAME: tail
#+BEGIN_SRC sh :tangle no :var data="" :results output
  tail -n 10 $data
#+END_SRC
* Code
#+NAME: Code
#+BEGIN_SRC python
  import torch
  from torch_geometric.datasets import Planetoid
  import torch.nn.functional as F
  from torch_geometric.nn import GCNConv

  # Load the Cora dataset
  dataset = Planetoid(root='data/Planetoid', name='Cora')


  class CustomGNN(torch.nn.Module):
      def __init__(self, input_dim, hiddin_dim, output_dim):
          super(CustomGNN, self).__init__()
          self.layer1 = GCNConv(input_dim, hiddin_dim)
          self.layer2 = GCNConv(hiddin_dim, output_dim)

      def forward(self, feature_data, edge_info):
          # First GCN layer
          x = self.layer1(feature_data, edge_info)
          x = F.relu(x)
          x = F.dropout(x, p=0.5, training=self.training)

          # Second GCN layer
          x = self.layer2(x, edge_info)
          return F.log_softmax(x, dim=1)


  # Initialise the GNN model
  input_features = dataset.num_node_features
  num_classes = dataset.num_classes
  model = CustomGNN(input_features, 16, num_classes)

  optimizer = torch.optim.Adam(model.parameters(), lr=0.01, weight_decay=5e-4)
  graph_data = dataset[0]


  def train_model():
      model.train()
      optimizer.zero_grad()
      output = model(graph_data.x, graph_data.edge_index)
      loss = F.nll_loss(output[graph_data.train_mask], graph_data.y[graph_data.train_mask])
      loss.backward()
      optimizer.step()
      return loss.item()


  for epoch in range(200):
      loss_value = train_model()
      print(f"Epoch: {epoch+1:03d}, Loss: {loss_value:.4f}")


  def evaluate_model():
      model.eval()
      with torch.no_grad():
          predictions = model(graph_data.x, graph_data.edge_index).argmax(dim=1)
          correct = (predictions[graph_data.test_mask] == graph_data.y[graph_data.test_mask]).sum()
          acc = int(correct) / int(graph_data.test_mask.sum())
      return acc


  accuracy = evaluate_model()
  print(f'Test Accuracy: {accuracy:.4f}')
#+END_SRC

#+RESULTS: Code
